<% content_for :title, "Integrations" %>

<%= render 'admin/header' %>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-8 pb-24 space-y-8">
  <section class="rounded-xl border border-blue-100 bg-blue-50/70 p-6 shadow-sm">
    <h2 class="text-lg font-semibold text-blue-900 mb-4">üè† Home Assistant setup</h2>
    <ol class="list-decimal ml-5 space-y-4 text-sm text-blue-800">
      <li>
        <span class="font-medium">Install the integration</span>
        <p class="mt-1 text-blue-700">Copy the custom integration into <code class="font-mono">&lt;ha_config&gt;/custom_components/homechat/</code>.</p>
      </li>
      <li>
        <span class="font-medium">Configure your connection</span>
        <ul class="mt-1 space-y-1 text-blue-700">
          <li>Host: <code class="font-mono"><%= request.host %></code></li>
          <li>Port: <code class="font-mono"><%= request.port %></code></li>
          <li>SSL: <%= request.ssl? ? 'Enabled' : 'Disabled' %></li>
          <li>API token: create one in the <%= link_to "Tokens", admin_tokens_path, class: "underline" %> tab.</li>
        </ul>
      </li>
      <li>
        <span class="font-medium">Verify connectivity</span>
        <p class="mt-1 text-blue-700">Use the <em>Test connection</em> button below to confirm Home Assistant can reach HomeChat.</p>
      </li>
    </ol>
  </section>

  <section class="rounded-xl border border-gray-200 bg-white shadow-sm">
    <header class="px-6 py-4 border-b border-gray-200">
      <h2 class="text-lg font-semibold text-gray-900">Integration settings</h2>
    </header>
    <div class="px-6 py-6">
      <%= form_with url: update_settings_admin_integrations_path, method: :patch, local: true, class: "space-y-6" do |f| %>
        <div class="space-y-4">
          <label class="flex items-start gap-3">
            <%= f.check_box :home_assistant_enabled,
                checked: @integration_settings[:home_assistant_enabled],
                class: "mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" %>
            <span>
              <span class="text-sm font-medium text-gray-900">Enable Home Assistant integration</span>
              <p class="text-xs text-gray-500">Allow Home Assistant to send messages and notifications to HomeChat.</p>
            </span>
          </label>

          <label class="flex items-start gap-3">
            <%= f.check_box :api_enabled,
                checked: @integration_settings[:api_enabled],
                class: "mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" %>
            <span>
              <span class="text-sm font-medium text-gray-900">Enable API access</span>
              <p class="text-xs text-gray-500">Allow external services and automations to interact with HomeChat.</p>
            </span>
          </label>

          <div>
            <%= f.label :webhook_base_url, 'Webhook base URL', class: "block text-sm font-medium text-gray-900" %>
            <%= f.text_field :webhook_base_url,
                value: @integration_settings[:webhook_base_url],
                placeholder: "https://homechat.local:3000",
                class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" %>
            <p class="text-xs text-gray-500 mt-1">This address must be reachable from your Home Assistant instance.</p>
          </div>
        </div>

        <div class="flex flex-wrap gap-3">
          <%= f.submit "Save settings", class: "inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white transition hover:bg-blue-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500" %>
          <button type="button" id="test-connection" class="inline-flex items-center justify-center rounded-md bg-emerald-600 px-4 py-2 text-sm font-medium text-white transition hover:bg-emerald-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500">Test connection</button>
        </div>
      <% end %>
    </div>
  </section>
</div>

<script>
(function() {
  const button = document.getElementById('test-connection')
  if (!button) return

  button.addEventListener('click', () => {
    if (button.dataset.busy === 'true') return
    const original = button.textContent
    button.dataset.busy = 'true'
    button.textContent = 'Testing‚Ä¶'
    button.disabled = true

    fetch('<%= test_connection_admin_integrations_path %>', {
      headers: { 'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content }
    })
      .then(resp => resp.json())
      .then(data => {
        const ok = data.status === 'success'
        button.textContent = ok ? 'Connection OK ‚úì' : 'Test failed ‚úó'
        button.classList.toggle('bg-emerald-600', ok)
        button.classList.toggle('hover:bg-emerald-700', ok)
        button.classList.toggle('bg-red-600', !ok)
        button.classList.toggle('hover:bg-red-700', !ok)
        if (!ok && data.message) alert('Test failed: ' + data.message)
      })
      .catch(error => {
        button.textContent = 'Test failed ‚úó'
        button.classList.remove('bg-emerald-600', 'hover:bg-emerald-700')
        button.classList.add('bg-red-600', 'hover:bg-red-700')
        alert('Test failed: ' + error)
      })
      .finally(() => {
        setTimeout(() => {
          button.textContent = original
          button.classList.remove('bg-red-600', 'hover:bg-red-700')
          button.classList.add('bg-emerald-600', 'hover:bg-emerald-700')
          button.dataset.busy = 'false'
          button.disabled = false
        }, 2400)
      })
  })
})()
</script>
