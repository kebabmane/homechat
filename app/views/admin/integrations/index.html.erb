<% content_for :title, "Integrations" %>

<%= render 'admin/header' %>
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6 pb-24">
  <!-- Setup Instructions -->
  <div class="mb-8 bg-blue-50 dark:bg-blue-900 rounded-lg p-6">
    <h3 class="text-lg font-semibold text-blue-900 dark:text-blue-100 mb-4">
      üè† Home Assistant Setup Instructions
    </h3>

    <div class="space-y-4 text-sm text-blue-800 dark:text-blue-200">
      <div>
        <strong>1. Install the HomeChat Integration:</strong>
        <p>Copy the custom integration to <code>&lt;ha_config&gt;/custom_components/homechat/</code></p>
      </div>

      <div>
        <strong>2. Configuration Details:</strong>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li><strong>Host:</strong> <%= request.host %></li>
          <li><strong>Port:</strong> <%= request.port %></li>
          <li><strong>SSL:</strong> <%= request.ssl? ? "Enabled" : "Disabled" %></li>
          <li><strong>API Token:</strong> Create one in the <%= link_to "Tokens", admin_tokens_path, class: "text-blue-600 hover:text-blue-800 underline" %> tab</li>
        </ul>
      </div>

      <div>
        <strong>3. Test Connection:</strong>
        <p>Use the "Test Connection" button below to verify API connectivity.</p>
      </div>
    </div>
  </div>

  <!-- Integration Settings -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow mb-8">
    <div class="p-6 border-b border-gray-200 dark:border-gray-700">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Integration Settings</h2>
    </div>
    
    <div class="p-6">
      <%= form_with url: update_settings_admin_integrations_path, method: :patch, local: true, class: "space-y-6" do |f| %>
        <div>
          <label class="flex items-center">
            <%= f.check_box :home_assistant_enabled, 
                checked: @integration_settings[:home_assistant_enabled], 
                class: "rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" %>
            <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">Enable Home Assistant Integration</span>
          </label>
          <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
            Allow Home Assistant to send messages and notifications to HomeChat.
          </p>
        </div>

        <div>
          <label class="flex items-center">
            <%= f.check_box :api_enabled, 
                checked: @integration_settings[:api_enabled], 
                class: "rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" %>
            <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">Enable API Access</span>
          </label>
          <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
            Allow external services to interact with HomeChat via API.
          </p>
        </div>

        <div>
          <label for="settings_webhook_base_url" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Webhook Base URL
          </label>
          <%= f.text_field :webhook_base_url, 
              value: @integration_settings[:webhook_base_url],
              placeholder: "https://homechat.local:3000",
              class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50 dark:bg-gray-700 dark:border-gray-600 dark:text-white" %>
          <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
            Base URL for webhook callbacks. This should be accessible from Home Assistant.
          </p>
        </div>

        <div class="flex gap-3">
          <%= f.submit "Save Settings", 
              class: "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" %>
          
          <button type="button" id="test-connection" 
                  class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
            Test Connection
          </button>
        </div>
      <% end %>
    </div>
  </div>


</div>

<script>
function copyToClipboard(text, element) {
  navigator.clipboard.writeText(text).then(function() {
    const originalText = element.innerHTML;
    element.innerHTML = 'Copied! ‚úì';
    element.classList.add('text-green-600');
    
    setTimeout(function() {
      element.innerHTML = originalText;
      element.classList.remove('text-green-600');
    }, 2000);
  }).catch(function(err) {
    console.error('Could not copy text: ', err);
  });
}

document.getElementById('test-connection').addEventListener('click', function() {
  const button = this;
  const originalText = button.textContent;
  button.textContent = 'Testing...';
  button.disabled = true;
  
  fetch('<%= test_connection_admin_integrations_path %>', {
    headers: {
      'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      button.textContent = 'Test Passed ‚úì';
      button.classList.remove('bg-green-500', 'hover:bg-green-700');
      button.classList.add('bg-green-600');
    } else {
      button.textContent = 'Test Failed ‚úó';
      button.classList.remove('bg-green-500', 'hover:bg-green-700');
      button.classList.add('bg-red-600');
      alert('Test failed: ' + data.message);
    }
  })
  .catch(error => {
    button.textContent = 'Test Failed ‚úó';
    button.classList.remove('bg-green-500', 'hover:bg-green-700');
    button.classList.add('bg-red-600');
    alert('Test failed: ' + error);
  })
  .finally(() => {
    button.disabled = false;
    setTimeout(() => {
      button.textContent = originalText;
      button.className = 'bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded';
    }, 3000);
  });
});
</script>

<%= turbo_frame_tag "token_modal" %>
